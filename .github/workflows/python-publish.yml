# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install poetry
      uses: abatilo/actions-poetry@v4
      with:
        poetry-version: '2.0.1'
    - name: Setup a local virtual environment
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - name: Define a cache for the virtual environment based on the dependencies lock file
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      run: poetry install --only main
    - name: Build package
      run: poetry build
    - name: Publish package
      run: poetry publish -u __token__ -p ${{ secrets.PYPI_API_TOKEN }}
